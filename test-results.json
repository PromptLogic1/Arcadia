{
  "timestamp": "2024-11-13T14:49:57.544Z",
  "totalTests": 33,
  "passedTests": 31,
  "failedTests": 2,
  "pendingTests": 0,
  "duration": 1855,
  "testResults": [
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Spielzustand Initialisierung SOLL Board korrekt initialisieren",
      "status": "passed",
      "duration": 11,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Spielzustand Initialisierung SOLL Zellen mit korrekter Struktur initialisieren",
      "status": "passed",
      "duration": 6,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Spielzustand Initialisierung SOLL Board-State bei Reset zurücksetzen",
      "status": "passed",
      "duration": 3,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Spielzustand Initialisierung SOLL Gewinnbedingungen korrekt initialisieren",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Spielzustand Initialisierung SOLL alle Spieler-States korrekt verwalten",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Team-Modus SOLL Team-basierte Siege korrekt erkennen",
      "status": "passed",
      "duration": 24,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Team-Modus SOLL Team-Mehrheiten korrekt berechnen",
      "status": "passed",
      "duration": 25,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Regelkonformität SOLL blockierte Zellen vor Updates schützen",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Regelkonformität SOLL ungültige Spielzüge ablehnen",
      "status": "passed",
      "duration": 7,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook State Validierung SOLL korrupte Board-States erkennen und behandeln",
      "status": "passed",
      "duration": 9,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook State Validierung SOLL Typ-Sicherheit bei Updates gewährleisten",
      "status": "passed",
      "duration": 2,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Performance SOLL State-Updates effizient durchführen",
      "status": "passed",
      "duration": 3,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Gewinnbedingungen SOLL horizontale Gewinnlinie erkennen",
      "status": "failed",
      "duration": 11,
      "errorMessages": [
        "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m0\u001b[39m\nReceived: \u001b[31mnull\u001b[39m\n    at Object.toBe (C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts:222:37)\n    at Promise.then.completed (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Dev\\Arcadia\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Dev\\Arcadia\\node_modules\\jest-runner\\build\\runTest.js:444:34)"
      ]
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Gewinnbedingungen SOLL vertikale Gewinnlinie erkennen",
      "status": "passed",
      "duration": 7,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Gewinnbedingungen SOLL diagonale Gewinnlinie erkennen",
      "status": "passed",
      "duration": 6,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Gewinnbedingungen SOLL Mehrheitssieg korrekt berechnen",
      "status": "passed",
      "duration": 6,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Spiellogik SOLL Blocking-Mechanismus korrekt implementieren",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Spiellogik SOLL Zell-Text auf 50 Zeichen begrenzen",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Edge Cases SOLL mit großen Boards performant umgehen",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Edge Cases SOLL Unentschieden erkennen",
      "status": "failed",
      "duration": 1,
      "errorMessages": [
        "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m-1\u001b[39m\nReceived: \u001b[31mnull\u001b[39m\n    at Object.toBe (C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts:317:37)\n    at Promise.then.completed (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Dev\\Arcadia\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Dev\\Arcadia\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Dev\\Arcadia\\node_modules\\jest-runner\\build\\runTest.js:444:34)"
      ]
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Edge Cases SOLL mit vollständig gefüllten Boards umgehen",
      "status": "passed",
      "duration": 8,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Edge Cases SOLL mit gleichzeitigen Gewinnbedingungen umgehen",
      "status": "passed",
      "duration": 23,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Edge Cases SOLL mit leeren Boards umgehen können",
      "status": "passed",
      "duration": 2,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Edge Cases SOLL mit Spieler-Disconnects umgehen",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Edge Cases SOLL Memory-Leaks vermeiden",
      "status": "passed",
      "duration": 2,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Zell-Management SOLL Zell-Updates atomar durchführen",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Zell-Management SOLL Zell-Farben und completedBy Arrays korrekt verwalten",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Zell-Management SOLL isMarked und blocked States korrekt tracken",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Fehlerbehandlung SOLL regelwidrige Aktionen verhindern",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Fehlerbehandlung SOLL Konflikte zwischen Spieleraktionen auflösen",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Fehlerbehandlung SOLL Fehler beim Zell-Update protokollieren",
      "status": "passed",
      "duration": 6,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Fehlerbehandlung SOLL bei kritischen Fehlern das Spiel pausieren",
      "status": "passed",
      "duration": 6,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoGame.test.ts",
      "testName": "useBingoGame Hook Fehlerbehandlung SOLL bei Inkonsistenzen den letzten validen State wiederherstellen",
      "status": "passed",
      "duration": 7,
      "errorMessages": []
    }
  ]
}