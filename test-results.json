{
  "timestamp": "2024-11-13T11:27:31.224Z",
  "totalTests": 23,
  "passedTests": 22,
  "failedTests": 1,
  "pendingTests": 0,
  "duration": 2895,
  "testResults": [
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Board Initialisierung SOLL initial loading state setzen",
      "status": "passed",
      "duration": 174,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Board Initialisierung SOLL Supabase-Verbindung nur einmal aufbauen",
      "status": "passed",
      "duration": 13,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Board Initialisierung SOLL Board-Daten mit Creator-Info laden",
      "status": "passed",
      "duration": 16,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Daten Fetching SOLL Board-Daten mit Creator-Info laden",
      "status": "passed",
      "duration": 15,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Board State Management SOLL optimistische Updates durchführen",
      "status": "passed",
      "duration": 15,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Realtime Subscriptions SOLL Echtzeit-Updates empfangen und verarbeiten",
      "status": "passed",
      "duration": 2,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Realtime Subscriptions SOLL bei Channel-Disconnects automatisch reconnecten",
      "status": "passed",
      "duration": 2,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Realtime Subscriptions SOLL empfangene Updates korrekt in den State integrieren",
      "status": "passed",
      "duration": 4,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Realtime Subscriptions Concurrent Updates SOLL Konflikte nach Last-Write-Wins auflösen",
      "status": "passed",
      "duration": 224,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Grundfunktionalität Realtime Subscriptions Concurrent Updates SOLL lokale Änderungen mit Server-Updates mergen",
      "status": "passed",
      "duration": 78,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Fehlerbehandlung Netzwerkfehler SOLL Fetch-Fehler korrekt behandeln",
      "status": "passed",
      "duration": 62,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Fehlerbehandlung Netzwerkfehler SOLL Update-Fehler korrekt behandeln",
      "status": "failed",
      "duration": 17,
      "errorMessages": [
        "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"Failed to update board\"\u001b[39m\nReceived: \u001b[31m\"Should have thrown an error\"\u001b[39m\n    at toBe (C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts:423:35)\n    at call (C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts:2:1)\n    at Generator.tryCatch (C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts:2:1)\n    at Generator._invoke [as next] (C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts:2:1)\n    at asyncGeneratorStep (C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts:2:1)\n    at asyncGeneratorStep (C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts:2:1)"
      ]
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Fehlerbehandlung Netzwerkfehler SOLL bei Verbindungsabbrüchen retry-Logik implementieren",
      "status": "passed",
      "duration": 308,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Fehlerbehandlung Netzwerkfehler SOLL bei kritischen Fehlern die Session beenden",
      "status": "passed",
      "duration": 1,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Fehlerbehandlung Datenvalidierung SOLL ungültige Board-States erkennen",
      "status": "passed",
      "duration": 13,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Fehlerbehandlung Datenvalidierung SOLL korrupte Daten erkennen und bereinigen",
      "status": "passed",
      "duration": 108,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Fehlerbehandlung Datenvalidierung SOLL eingehende Board-Daten auf Vollständigkeit prüfen",
      "status": "passed",
      "duration": 14,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Fehlerbehandlung Datenvalidierung SOLL Type-Safety über die gesamte Datenverarbeitung gewährleisten",
      "status": "passed",
      "duration": 14,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Edge Cases Performance SOLL große Datenmengen effizient verarbeiten",
      "status": "passed",
      "duration": 61,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Edge Cases Performance SOLL Netzwerk-Requests bündeln",
      "status": "passed",
      "duration": 186,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Edge Cases Performance SOLL unnötige Re-Renders vermeiden",
      "status": "passed",
      "duration": 31,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Edge Cases Performance SOLL Speicherverbrauch optimieren",
      "status": "passed",
      "duration": 9,
      "errorMessages": []
    },
    {
      "filePath": "C:\\Dev\\Arcadia\\__tests__\\hooks\\useBingoBoard.test.ts",
      "testName": "useBingoBoard Hook Edge Cases SOLL die Konsistenz des Board-States garantieren",
      "status": "passed",
      "duration": 2,
      "errorMessages": []
    }
  ]
}